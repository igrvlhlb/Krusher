/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package krusher

import org.checkerframework.common.value.qual.IntRange
import java.awt.image.BufferedImage
import java.io.File

typealias ImgQuality = @IntRange(from = 0, to = 100) Int

interface Krusher<T> {
    fun toRgb(img: T): T
    fun compress(img: T, quality: ImgQuality): T
    fun process(img: T, iterations: Int): T
    fun compose(img: T, block: KrusherComposer.() -> Unit): T =
        KrusherScope(this, img).run { block(); image }
    fun write(img: T, file: File)
    fun fromAwt(img: BufferedImage): T
    fun toAwt(img: T): BufferedImage
}

interface KrusherComposer {
    fun toRgb(): KrusherComposer
    fun compress(quality: ImgQuality): KrusherComposer
    fun process(iterations: Int): KrusherComposer
}

abstract class KrusherComposerAbs<T>(var image: T, protected var krusher: Krusher<T>): KrusherComposer {
    protected fun T.commit() {
        image = this
    }
}

class KrusherScope<T>(obj: Krusher<T>, bufferedImage: T): Krusher<T> by obj, KrusherComposerAbs<T>(bufferedImage, obj)  {
    override fun toRgb() = apply { toRgb(image).commit() }

    override fun compress(quality: ImgQuality) = apply { compress(image, quality).commit() }

    override fun process(iterations: Int) = apply { process(image, iterations).commit() }
}

