/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package krusher

import org.checkerframework.common.value.qual.IntRange
import java.awt.image.BufferedImage

typealias ImgQuality = @IntRange(from = 0, to = 100) Int

interface Krusher {
    fun toRgb(img: BufferedImage): BufferedImage
    fun compress(img: BufferedImage, quality: ImgQuality): BufferedImage
    fun process(img: BufferedImage, iterations: Int): BufferedImage
    fun compose(img: BufferedImage, block: KrusherScope.() -> BufferedImage) = KrusherScope(this, img).block()
}

class KrusherScope(private val obj: Krusher, private var bufferedImage: BufferedImage): Krusher by obj  {
    override fun toRgb(img: BufferedImage): BufferedImage = obj.toRgb(bufferedImage).commit()
    fun toRgb() = this.toRgb(bufferedImage)

    override fun compress(img: BufferedImage, quality: ImgQuality) = obj.compress(bufferedImage, quality).commit()
    fun compress(quality: ImgQuality) = this.compress(bufferedImage, quality)

    override fun process(img: BufferedImage, iterations: Int) = obj.process(img, iterations).commit()
    fun process(iterations: Int) = this.process(bufferedImage, iterations)

    private fun BufferedImage.commit() = apply { bufferedImage = this }
}

